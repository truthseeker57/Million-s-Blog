{
  "posts": [
    {
      "id": "11",
      "title": "TAGS-MISSING.TXT",
      "date": "09/08/2025",
      "time": "05:00 PM",
      "read": "1MIN",
      "excerpt": "Just to test empty tags.",
      "content": "This post has no tags.",
      "tags": [],
      "likes": 1,
      "comments": 0,
      "featured": true
    },
    {
      "id": "12",
      "title": "MINIMAL.TXT",
      "date": "09/09/2025",
      "time": "08:00 AM",
      "read": "1MIN",
      "excerpt": "",
      "content": "Minimal content to check lowest limits.",
      "tags": [],
      "likes": 0,
      "comments": 0,
      "featured": false
    },
    {
      "id": "13",
      "title": "MASSIVE-CONTENT.TXT",
      "date": "09/10/2025",
      "time": "02:22 PM",
      "read": "12MIN",
      "excerpt": "Large block of content for scroll testing.",
      "content": "Lorem ipsum ",
      "tags": [
        "STRESS",
        "LARGE"
      ],
      "likes": 100,
      "comments": 25,
      "featured": true
    },
    {
      "id": "2",
      "title": "REACT-HOOKS-FOR-NOTES.TXT",
      "date": "08/12/2025",
      "time": "11:10 AM",
      "read": "7MIN",
      "content": "React Hooks provide a powerful and elegant way to build a notes application using functional components instead of relying on class components. The main advantage of hooks is that they simplify state management and side effects while keeping code clean and reusable.\n\nThe most commonly used hook for a notes app is useState, which helps store and update individual notes or an array of notes. For example, when a user types a new note, useState allows you to capture the input and append it to the notes list. Alongside this, useEffect can be used to handle side effects such as saving notes to local storage so that data is not lost when the page refreshes. By combining these two hooks, developers can easily provide persistence and responsiveness to their notes application.\n\nFor more complex scenarios, useReducer is a great option. It allows managing multiple note-related actions such as adding, editing, and deleting with a single state logic handler. This keeps the code organized and easier to scale as the app grows. If the notes app has multiple components (like a note editor, a notes list, and filters), useContext can be used to share data and state globally without passing props manually through every level of the component tree.\n\nIn addition, custom hooks can be created to encapsulate repeated logic. For instance, a custom hook for ‚ÄúuseLocalStorage‚Äù can automatically synchronize notes with the browser‚Äôs storage. This makes the app more modular and keeps the main component focused only on rendering and interactions.\n\nBy leveraging React Hooks, developers can build a notes app that is lightweight, efficient, and easy to maintain. Hooks not only improve code readability but also encourage reusable patterns, making them one of the most effective tools in modern React development.",
      "excerpt": "Explaining a simple system for managing project\nnotes in React using custom hooks. Lightweight,\nscalable, and great for dev journals.",
      "tags": [
        "REACT"
      ],
      "likes": 11,
      "comments": 2,
      "featured": true
    },
    {
      "id": "3",
      "title": "HOW-I-DESIGNED-A-TERMINAL-UI.TXT",
      "date": "08/28/2025",
      "time": "06:32 PM",
      "read": "6MIN",
      "content": "Designing a terminal UI is a unique challenge because the interface has no graphics, only text. My goal was to make it both functional and visually appealing within the constraints of a command-line environment. The first step was to define the structure: I decided on a clear layout with sections for menus, status bars, and user input. Using spacing, borders, and ASCII characters, I created visual separation between these parts.\n\nI focused on usability first. Key commands had to be intuitive, so I mapped them to simple keyboard shortcuts. Consistency was important‚Äîif one action used a certain key combination, similar actions followed the same pattern. I also included feedback for every action, such as status messages or highlighting changes in real time.\n\nAnother important part of the design was color. Even in a terminal, colors can guide the user‚Äôs attention. For example, green for success, red for errors, and yellow for warnings. Careful use of colors made the interface feel more alive and easier to navigate.\n\nLastly, I kept the design modular. Each component (menu, input box, output window) was developed separately so that the UI could scale or adapt later. This modular approach also made the code easier to maintain and extend with new features.\n\nOverall, designing the terminal UI taught me that even without graphics, you can create a clean, user-friendly interface by focusing on structure, usability, feedback, and modularity.",
      "excerpt": "A write-up about designing a terminal-inspired UI\nwithout sacrificing readability. Covers font sizes,\nline lengths, and layout tricks for blogs.",
      "tags": [
        "REACT",
        "UI"
      ],
      "likes": 23,
      "comments": 4,
      "featured": false
    },
    {
      "id": "4",
      "title": "ASYNC-JS-DEEPDIVE.TXT",
      "date": "09/01/2025",
      "time": "02:10 PM",
      "read": "8MIN",
      "excerpt": "A full breakdown of async patterns in JS: callbacks, promises, and async/await.",
      "content": "Asynchronous programming in JavaScript enables non-blocking operations. It starts with callbacks, then evolves to promises, and finally async/await for cleaner syntax. Each phase has pros and cons...",
      "tags": [
        "JAVASCRIPT"
      ],
      "likes": 28,
      "comments": 5,
      "featured": false
    },
    {
      "id": "7",
      "title": "EMPTY-POST-FIELDS.TXT",
      "date": "09/04/2025",
      "time": "10:00 AM",
      "read": "",
      "excerpt": "",
      "content": "",
      "tags": [],
      "likes": 0,
      "comments": 0,
      "featured": true
    },
    {
      "id": "1757462830743",
      "title": "FLUTTER-STATE-MGMT.TXT",
      "date": "9/9/2025",
      "time": "07:07 PM",
      "read": "1MIN",
      "excerpt": "Quick comparison of Provider, Riverpod, Bloc, and setState.",
      "tags": [
        "FLUTTER",
        "STATE"
      ],
      "content": "Choosing state management in Flutter depends on your app‚Äôs complexity. setState works for small widgets, Provider is a mid-tier solution, Bloc is more structured, and Riverpod is gaining popularity...",
      "likes": 0,
      "comments": 0,
      "featured": false
    },
    {
      "id": "9",
      "title": "üî•üî•-UNICODE-TEST.TXT",
      "date": "09/06/2025",
      "time": "12:15 PM",
      "read": "2MIN",
      "excerpt": "Can your app handle Unicode and emoji?",
      "content": "Here‚Äôs a post full of emojis: üöÄüî•üí°‚ú®üêçüë®‚Äçüíª and other multilingual text like „Åì„Çì„Å´„Å°„ÅØ, ŸÖÿ±ÿ≠ÿ®Ÿãÿß, ◊©◊ú◊ï◊ù",
      "tags": [
        "TEST"
      ],
      "likes": 3,
      "comments": 0,
      "featured": false
    },
    {
      "id": "6",
      "title": "BUG-HUNTING-STRATEGIES.TXT",
      "date": "09/03/2025",
      "time": "04:20 PM",
      "read": "3MIN",
      "excerpt": "How to track down those elusive bugs in complex systems.",
      "content": "Reproducing bugs reliably is key. Use binary search within commits to isolate regressions. Log everything. When in doubt, simplify the problem...",
      "tags": [
        "DEBUGGING"
      ],
      "likes": 5,
      "comments": 0,
      "featured": false
    },
    {
      "id": "1760206531608",
      "title": "Good Things",
      "date": "10/11/2025",
      "time": "01:15 PM",
      "read": "1MIN",
      "excerpt": "Stuff about good things",
      "content": "",
      "tags": [
        "STUFF",
        "ANOTHER"
      ],
      "likes": 0,
      "comments": 0,
      "featured": false
    },
    {
      "id": "1760207028792",
      "title": "Test",
      "date": "10/11/2025",
      "time": "01:23 PM",
      "read": "1MIN",
      "excerpt": "asdfasdfa kljasfdlkj lk;ajsfdlj;lkj lkajsdflkj lkj;lj; lkajfslask;j ;asdfljk",
      "content": "<h1>The tits don't Lie.&nbsp;</h1><div><span style=\"font-weight: 400;\">Hello everyone! What is going on today?</span></div><div><span style=\"font-weight: 400;\">The thing below is an HR</span></div><hr><blockquote>asdfasdf</blockquote><blockquote><ul><li>Hello</li><li>How are you<br></li><li>Just a lit</li></ul><div><ol><li>This is an ordered list</li><li>Another item</li></ol><div><a href=\"https://www.google.com\">https://www.google.com</a><br></div></div></blockquote>",
      "tags": [
        "TEST",
        "TESTING"
      ],
      "likes": 0,
      "comments": 0,
      "featured": false
    },
    {
      "id": "10",
      "title": "FUTURE-OF-AI.TXT",
      "date": "09/07/2025",
      "time": "01:00 PM",
      "read": "9MIN",
      "excerpt": "Exploring AI ethics, LLMs, and the road to AGI.",
      "content": "As AI grows more powerful, ethical frameworks must evolve. LLMs like ChatGPT are stepping stones. However, we must ensure transparency, fairness, and avoid misuse...",
      "tags": [
        "AI",
        "ETHICS"
      ],
      "likes": 45,
      "comments": 13,
      "featured": false
    }
  ],
  "draft": [
    {
      "id": "1760208699795",
      "title": "Untitled",
      "date": "10/11/2025",
      "time": "01:51 PM",
      "read": "1MIN",
      "excerpt": "",
      "content": "",
      "tags": [],
      "likes": 0,
      "comments": 0,
      "featured": false
    }
  ],
  "trash": []
}